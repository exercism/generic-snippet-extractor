#! /bin/bash -e

# Synopsis:
# Test the snippet extractor Docker image by running it against a predefined set of 
# submissions with an expected output.
# The Docker image is built automatically.

# Arguments:
# $1: track slug (optional)
# $2: test name (optional)

# Output:
# Outputs the diff of the expected snippets against the actual snippets
# generated by the snippet extractor Docker image.

# Example:
# ./bin/run-tests-in-docker.sh

# Example running tests of a single track:
# ./bin/run-tests-in-docker.sh csharp

# Example running tests of a single track and the 'full' test case:
# ./bin/run-tests-in-docker.sh csharp full

# Stop executing when a command returns a non-zero return code
shopt -s extglob

track_slug="${1:-*}"
test_name="${2:-*}"

exit_code=0

# Pre-build the image to not build it for every test submission
docker build --rm -t exercism/snippet-extractor .

# Iterate over all test directories
for test_dir in tests/${track_slug}/${test_name}; do
    track_name=$(basename $(realpath "${test_dir}/../"))
    test_name=$(basename "${test_dir}")
    test_dir_path=$(realpath "${test_dir}")
    code_file_path=(${test_dir_path}/code.*)

    # We skip building the Docker image to speedup execution
    SKIP_BUILD=1 bin/run-in-docker.sh "${track_name}" "${code_file_path}" "${test_dir_path}"

    expected_snippet_file_path="$(ls ${test_dir_path}/expected_snippet.*)"
    snippet_extension="${expected_snippet_file_path##*.}"
    snippet_file_path="${test_dir_path}/snippet.${snippet_extension}"

    # Ensure there is a trailing newline in both files
    sed -i -e '$a\' "${snippet_file_path}"
    sed -i -e '$a\' "${expected_snippet_file_path}"

    echo "${track_name}/${test_name}: comparing snippet.${snippet_extension} to expected_snippet.${snippet_extension}"
    diff "${snippet_file_path}" "${expected_snippet_file_path}"

    if [ $? -ne 0 ]; then
        exit_code=1
    fi
done

exit ${exit_code}
